basePath: /
definitions:
  dto.CreateDTO:
    properties:
      id:
        type: string
      string:
        type: string
    type: object
  dto.CreateUserDTO:
    properties:
      email:
        maxLength: 100
        type: string
      fullname:
        maxLength: 100
        type: string
      password:
        type: string
      username:
        maxLength: 50
        type: string
    required:
    - email
    - fullname
    - password
    - username
    type: object
  dto.ErrorDTO:
    properties:
      error:
        type: string
    type: object
  dto.FindUserDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.LoginDTO:
    properties:
      token:
        type: string
    type: object
  dto.LoginUserDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: api for a user services for a newspaper
  title: Backend Portfolio API
  version: "1.0"
paths:
  /users/create:
    post:
      consumes:
      - application/json
      description: that method creates a new user
      parameters:
      - description: user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
      summary: Create new user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: that is the login method
      parameters:
      - description: user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
      summary: Login User
      tags:
      - users
  /users/one/{id}:
    get:
      consumes:
      - application/json
      description: that method finds an user
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.FindUserDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
      summary: Find One User
      tags:
      - users
swagger: "2.0"
